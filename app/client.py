from aiogram import Router, F
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from app.database.requests import set_user, update_user, get_product, get_user
import app.keyboards as kb

import re  
import configparser


# –ß–∏—Ç–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.ini
config = configparser.ConfigParser()
config.read("settings.ini")

group_id = config["Group"]["group_id"]

name = config["Other"]["name"]
phone_number = config["Other"]["phone_number"]
user = config["Other"]["user"]


client = Router()

# –•—ç–Ω–¥–ª–µ—Ä –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start
@client.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    is_user = await set_user(message.from_user.id)
    if not is_user:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üëã\n" \
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...\n" \
                            f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ‚úçÔ∏è",
                            reply_markup=await kb.clients_name(message.from_user.first_name))
        await state.set_state("reg_name")
    else:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üëã\n" \
                            f"–ò—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–∞ ‚¨áÔ∏è",
                            reply_markup=kb.main_menu)


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—é –ò–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@client.message(StateFilter("reg_name"))
async def get_reg_name(message: Message, state: FSMContext):
    name = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã –∏–º—è –Ω–µ –±—ã–ª–æ –æ–¥–Ω–æ–π –±—É–∫–≤–æ–π
    if len(name) < 2:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ.\n"
                             "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: ‚úçÔ∏è")
        return

    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–º–µ–Ω–∏: –±—É–∫–≤—ã (–∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –∏ –ª–∞—Ç–∏–Ω–∏—Ü–∞), –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã
    if not re.fullmatch(r"[a-zA-Z–∞-—è–ê-–Ø—ë–Å]+(?:[-\s][a-zA-Z–∞-—è–ê-–Ø—ë–Å]+)*", name):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.\n"
                             "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –≤–æ–∑–º–æ–∂–Ω–æ —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –∏–ª–∏ –¥–µ—Ñ–∏—Å–æ–º.\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: ‚úçÔ∏è")
        return

    await state.update_data(name=name.title()) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ‚òéÔ∏è",
                         reply_markup=await kb.clients_phone())
    await state.set_state("reg_phone") # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –í–°–¢–ê–í–ö–£ –∫–æ–Ω—Ç–∞–∫—Ç–∞ (Telegram –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å)
@client.message(F.contact, StateFilter("reg_phone"))
async def get_reg_phone_number(message: Message, state: FSMContext):
    await state.update_data(phone_number=message.contact.phone_number) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    data = await state.get_data() # –¥–æ—Å—Ç–∞–µ–º –í–°–Æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user(tg_id=message.from_user.id, name=data["name"], phone_number=data["phone_number"])
    await message.answer(f"‚úÖ –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n" \
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üëã",
                         reply_markup=kb.main_menu)
    
    await state.clear() # –æ—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –í–†–£–ß–ù–£–Æ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
@client.message(StateFilter("reg_phone"))
async def get_reg_phone_number(message: Message, state: FSMContext):
    raw_phone = message.text.strip().replace("+", "")

    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
    digits_only = re.sub(r'\D', '', raw_phone)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
    if not (8 <= len(digits_only) <= 15):
        await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                             "–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 8 –¥–æ 15 —Ü–∏—Ñ—Ä.\n"
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: ‚òéÔ∏è")
        return

    await state.update_data(phone_number=digits_only) # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    data = await state.get_data() # –¥–æ—Å—Ç–∞–µ–º –í–°–Æ –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update_user(tg_id=message.from_user.id, name=data["name"], phone_number=digits_only)
    await message.answer(f"‚úÖ –í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n" \
                         f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω! üëã",
                         reply_markup=kb.main_menu)
    
    await state.clear() # –æ—á–∏—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é


# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–∞—Ç–∞–ª–æ–≥" (–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
@client.callback_query(F.data == "categories")
@client.message(F.text == "üóÇ –ö–∞—Ç–∞–ª–æ–≥")
async def catalog(event: Message | CallbackQuery): 
    if isinstance(event, Message):  # –ï—Å–ª–∏ –∏–≤–µ–Ω—Ç - —Å–æ–æ–±—â–µ–Ω–∏–µ
        await event.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ üõç",
                            reply_markup=await kb.categories_builder())
    else:
        await event.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥")
        await event.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ üõç",
                                    reply_markup=await kb.categories_builder())


# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–∞–∫—Ç—ã" (–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
@client.message(F.text == "üì≤ –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: Message):
    await message.answer("–ï—Å–ª–∏ —É –í–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–ª–∏–±–æ –≤–æ–ø—Ä–æ—Å—ã, –≤–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: \n"
                         f"–ò–º—è: {name}\n"
                         f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n"
                         f"telegram: {user}",
                            reply_markup=kb.main_menu
                        )


# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏"
@client.callback_query(F.data.startswith("category_"))
async def products(callback: CallbackQuery):
    await callback.answer()
    category_id = int(callback.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ "–î—Ä—É–≥–∏–µ –≤–µ—â–∏"
    if category_id == 2:
        await callback.message.edit_text("–ü–æ–∫–∞ —á—Ç–æ –∑–¥–µ—Å—å –ø—É—Å—Ç–æ..",
                                        reply_markup=await kb.product_builder(category_id))
        return
    
    try:
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ¬ÆÔ∏è",
                                        reply_markup=await kb.product_builder(category_id))
    except: # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        await callback.message.delete() # –£–¥–∞–ª—è–µ–º —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä ¬ÆÔ∏è",
                                        reply_markup=await kb.product_builder(category_id))
        

# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è "–¢–æ–≤–∞—Ä–∞" (–° –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥")
@client.callback_query(F.data.startswith("product_"))
async def product_info(callback: CallbackQuery):
    await callback.answer()
    product_id = int(callback.data.split("_")[1])
    product = await get_product(product_id=product_id)
    await callback.message.delete()
    await callback.message.answer_photo(photo=product.image,
                                    caption=f"{product.name}\n\n{product.description}\n\n{product.price} RUB",
                                    reply_markup=await kb.back_to_categories(product.category_id, product_id))


# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å"
@client.callback_query(F.data.startswith("buy_"))
async def client_buy_callback(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    product_id = int(callback.data.split("_")[1]) 
    await state.set_state("waiting_for_address")
    await state.update_data(product_id=product_id)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏")


'''–•—ç–Ω–¥–ª–µ—Ä –≤ —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –ª–æ–∫–∞—Ü–∏—é —Å–∞–º'''
# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –æ—Ç–ª–∞–≤–ª–∏–≤–∞–Ω–∏—é –∞–¥—Ä–µ—Å–∞
@client.message(StateFilter("waiting_for_address"))
async def getting_location(message: Message, state: FSMContext):
    data = await state.get_data()   # –¥–æ—Å—Ç–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ—É –æ–± –∞–¥—Ä–µ—Å–µ
    address = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ ID
    user = await get_user(message.from_user.id)
    product_id = data.get("product_id")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –ø–æ –µ–≥–æ ID
    product = await get_product(product_id)
    product_name = product.name if product else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä"
    full_info = (
        f"üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : {user.name} @{message.from_user.username} (ID: {user.tg_id})\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone_number}\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üì¶ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {product_name}\n"
        f"¬ÆÔ∏è –¢–æ–≤–∞—Ä ID: {product_id}"
    )
    await message.bot.send_message(group_id, full_info) # –≠—Ç–æ ID –Ω–∞—à–µ–π –≥—Ä—É–ø–ø—ã –≤ —Ç–µ–ª–µ–≥–µ
    await message.answer("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! ‚úÖ\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –í–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è...",
                        reply_markup=kb.main_menu)
    await state.clear()


# —Ö–µ–Ω–¥–ª–µ—Ä –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
@client.message(F.photo)
async def get_photo(message: Message):
    await message.answer(message.photo[-1].file_id)


